TOP 子句
    TOP 子句用于规定要返回的记录的数目。
    
    SQL Server语法:
      SELECT TOP number|percent column_name(s)
      FROM table_name
    MySQL 语法：
      SELECT column_name(s)
      FROM table_name
      LIMIT number
    Oracle 语法：
      SELECT column_name(s)
      FROM table_name
      WHERE ROWNUM <= number
      
LIKE 操作符
    LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。
    
    SELECT * FROM Persons
    WHERE City LIKE '%g'

SQL 通配符
    在搜索数据库中的数据时，SQL 通配符可以替代一个或多个字符。
    SQL 通配符必须与 LIKE 运算符一起使用。
    
    通配符	       描述
    %	           替代一个或多个字符
    _	           仅替代一个字符
    [charlist]	 字符列中的任何单一字符
    [^charlist]  不在字符列中的任何单一字符
    或者
    [!charlist]

IN 操作符
    IN 操作符允许我们在 WHERE 子句中规定多个值。
    
    SQL IN 语法
        SELECT column_name(s)
        FROM table_name
        WHERE column_name IN (value1,value2,...)
        
BETWEEN 操作符
    操作符 BETWEEN ... AND 会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。
    
    SQL BETWEEN 语法
        SELECT column_name(s)
        FROM table_name
        WHERE column_name
        BETWEEN value1 AND value2
SQL Alias
    表的 SQL Alias 语法
        SELECT column_name(s)
        FROM table_name
        AS alias_name
        
    列的 SQL Alias 语法
        SELECT column_name AS alias_name
        FROM table_name
        
SQL join 
    用于根据两个或多个表中的列之间的关系，从这些表中查询数据。
    inner join 和 join 是一样的
    
    JOIN: 如果表中有至少一个匹配，则返回行
    LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行
    RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行
    FULL JOIN: 只要其中一个表中存在匹配，就返回行

SQL UNION 操作符
    UNION 操作符用于合并两个或多个 SELECT 语句的结果集。
      请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。
      
    SQL UNION 语法
        SELECT column_name(s) FROM table_name1
        UNION
        SELECT column_name(s) FROM table_name2
      注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。
      
    SQL UNION ALL 语法
        SELECT column_name(s) FROM table_name1
        UNION ALL
        SELECT column_name(s) FROM table_name2
      另外，UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。

SELECT INTO 语句
    SELECT INTO 语句从一个表中选取数据，然后把数据插入另一个表中。
    SELECT INTO 语句常用于创建表的备份复件或者用于对记录进行存档。
    
    SQL SELECT INTO 语法
        您可以把所有的列插入新表：
        SELECT *
        INTO new_table_name [IN externaldatabase] 
        FROM old_tablename
        
        或者只把希望的列插入新表：
        SELECT column_name(s)
        INTO new_table_name [IN externaldatabase] 
        FROM old_tablename
        
    IN 子句可用于向另一个数据库中拷贝表：
        SELECT *
        INTO Persons IN 'Backup.mdb'
        FROM Persons
        
CREATE DATABASE 语句
    CREATE DATABASE 用于创建数据库。
    
    SQL CREATE DATABASE 语法
        CREATE DATABASE database_name

CREATE TABLE 语句
    CREATE TABLE 语句用于创建数据库中的表。
    
    SQL CREATE TABLE 语法
        CREATE TABLE 表名称
        (
        列名称1 数据类型,
        列名称2 数据类型,
        列名称3 数据类型,
        ....
        )
    数据类型	    描述
integer(size)    仅容纳整数。在括号内规定数字的最大位数。
int(size)
smallint(size)
tinyint(size)

decimal(size,d) 容纳带有小数的数字。
numeric(size,d) "size" 规定数字的最大位数。"d" 规定小数点右侧的最大位数。


char(size)	    容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。
                在括号中规定字符串的长度。

varchar(size)	  容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。
                在括号中规定字符串的最大长度。

date(yyyymmdd)	容纳日期。

SQL 约束
    约束用于限制加入表的数据的类型。
    可以在创建表时规定约束（通过 CREATE TABLE 语句），或者在表创建之后也可以（通过 ALTER TABLE 语句）。

    NOT NULL
    UNIQUE
    PRIMARY KEY
    FOREIGN KEY
    CHECK
    DEFAULT
    
    ADD， DROP

索引
    您可以在表中创建索引，以便更加快速高效地查询数据。
    用户无法看到索引，它们只能被用来加速搜索/查询。
      注释：更新一个包含索引的表需要比更新一个没有索引的表更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。
      
    SQL CREATE INDEX 语法
        在表上创建一个简单的索引。允许使用重复的值：
        CREATE INDEX index_name
        ON table_name (column_name)
          注释："column_name" 规定需要索引的列。
          
    SQL CREATE UNIQUE INDEX 语法
        在表上创建一个唯一的索引。唯一的索引意味着两个行不能拥有相同的索引值。
        CREATE UNIQUE INDEX index_name
        ON table_name (column_name)

通过使用 DROP 语句，可以轻松地删除索引、表和数据库。

    SQL DROP INDEX 语句
    我们可以使用 DROP INDEX 命令删除表格中的索引。
    
    用于 Microsoft SQLJet (以及 Microsoft Access) 的语法:
    DROP INDEX index_name ON table_name 
    
    用于 MS SQL Server 的语法:
    DROP INDEX table_name.index_name
    
    用于 IBM DB2 和 Oracle 语法:
    DROP INDEX index_name
    
    用于 MySQL 的语法:
    ALTER TABLE table_name DROP INDEX index_name
    
    SQL DROP TABLE 语句
    DROP TABLE 语句用于删除表（表的结构、属性以及索引也会被删除）：
    DROP TABLE 表名称
    
    SQL DROP DATABASE 语句
    DROP DATABASE 语句用于删除数据库：
    DROP DATABASE 数据库名称
    
    SQL TRUNCATE TABLE 语句
    如果我们仅仅需要除去表内的数据，但并不删除表本身，那么我们该如何做呢？
    请使用 TRUNCATE TABLE 命令（仅仅删除表格中的数据）：
    TRUNCATE TABLE 表名称

ALTER TABLE 语句
    ALTER TABLE 语句用于在已有的表中添加、修改或删除列。
    
    SQL ALTER TABLE 语法
    如需在表中添加列，请使用下列语法:
    ALTER TABLE table_name
    ADD column_name datatype
    
    要删除表中的列，请使用下列语法：
    ALTER TABLE table_name 
    DROP COLUMN column_name
      注释：某些数据库系统不允许这种在数据库表中删除列的方式 (DROP COLUMN column_name)。
      
    要改变表中列的数据类型，请使用下列语法：
    ALTER TABLE table_name
    ALTER COLUMN column_name datatype

Auto-increment 会在新记录插入表中时生成一个唯一的数字。
AUTO INCREMENT 字段
我们通常希望在每次插入新记录时，自动地创建主键字段的值。
我们可以在表中创建一个 auto-increment 字段。

    用于 MySQL 的语法
        下列 SQL 语句把 "Persons" 表中的 "P_Id" 列定义为 auto-increment 主键：
        CREATE TABLE Persons
        (
        P_Id int NOT NULL AUTO_INCREMENT,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),
        Address varchar(255),
        City varchar(255),
        PRIMARY KEY (P_Id)
        )
    MySQL 使用 AUTO_INCREMENT 关键字来执行 auto-increment 任务。
    默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。
    要让 AUTO_INCREMENT 序列以其他的值起始，请使用下列 SQL 语法：
    ALTER TABLE Persons AUTO_INCREMENT=100
    要在 "Persons" 表中插入新记录，我们不必为 "P_Id" 列规定值（会自动添加一个唯一的值）：
    INSERT INTO Persons (FirstName,LastName)
    VALUES ('Bill','Gates')
    上面的 SQL 语句会在 "Persons" 表中插入一条新记录。"P_Id" 会被赋予一个唯一的值。"FirstName" 会被设置为 "Bill"，"LastName" 列会被设置为 "Gates"。
    
    用于 SQL Server 的语法
    下列 SQL 语句把 "Persons" 表中的 "P_Id" 列定义为 auto-increment 主键：
        CREATE TABLE Persons
        (
        P_Id int PRIMARY KEY IDENTITY,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),
        Address varchar(255),
        City varchar(255)
        )
    MS SQL 使用 IDENTITY 关键字来执行 auto-increment 任务。
    默认地，IDENTITY 的开始值是 1，每条新记录递增 1。
    要规定 "P_Id" 列以 20 起始且递增 10，请把 identity 改为 IDENTITY(20,10)
    要在 "Persons" 表中插入新记录，我们不必为 "P_Id" 列规定值（会自动添加一个唯一的值）：
    INSERT INTO Persons (FirstName,LastName)  
    VALUES ('Bill','Gates')
    上面的 SQL 语句会在 "Persons" 表中插入一条新记录。"P_Id" 会被赋予一个唯一的值。"FirstName" 会被设置为 "Bill"，"LastName" 列会被设置为 "Gates"。
    
用于 Access 的语法
    下列 SQL 语句把 "Persons" 表中的 "P_Id" 列定义为 auto-increment 主键：
        CREATE TABLE Persons
        (
        P_Id int PRIMARY KEY AUTOINCREMENT,
        LastName varchar(255) NOT NULL,
        FirstName varchar(255),
        Address varchar(255),
        City varchar(255)
        )
    MS Access 使用 AUTOINCREMENT 关键字来执行 auto-increment 任务。
    默认地，AUTOINCREMENT 的开始值是 1，每条新记录递增 1。
    要规定 "P_Id" 列以 20 起始且递增 10，请把 autoincrement 改为 AUTOINCREMENT(20,10)
    要在 "Persons" 表中插入新记录，我们不必为 "P_Id" 列规定值（会自动添加一个唯一的值）：
    INSERT INTO Persons (FirstName,LastName)
    VALUES ('Bill','Gates')
    上面的 SQL 语句会在 "Persons" 表中插入一条新记录。"P_Id" 会被赋予一个唯一的值。"FirstName" 会被设置为 "Bill"，"LastName" 列会被设置为 "Gates"。
    
用于 Oracle 的语法
    在 Oracle 中，代码稍微复杂一点。
    您必须通过 sequence 对创建 auto-increment 字段（该对象生成数字序列）。
    请使用下面的 CREATE SEQUENCE 语法：
        CREATE SEQUENCE seq_person
        MINVALUE 1
        START WITH 1
        INCREMENT BY 1
        CACHE 10
    上面的代码创建名为 seq_person 的序列对象，它以 1 起始且以 1 递增。该对象缓存 10 个值以提高性能。CACHE 选项规定了为了提高访问速度要存储多少个序列值。
    要在 "Persons" 表中插入新记录，我们必须使用 nextval 函数（该函数从 seq_person 序列中取回下一个值）：
    INSERT INTO Persons (P_Id,FirstName,LastName)
    VALUES (seq_person.nextval,'Lars','Monsen')
    上面的 SQL 语句会在 "Persons" 表中插入一条新记录。"P_Id" 的赋值是来自 seq_person 序列的下一个数字。"FirstName" 会被设置为 "Bill"，"LastName" 列会被设置为 "Gates"。


SQL CREATE VIEW 语句
    什么是视图？
    在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。
    视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。
      注释：数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。
      
    SQL CREATE VIEW 语法
        CREATE VIEW view_name AS
        SELECT column_name(s)
        FROM table_name
        WHERE condition
      注释：视图总是显示最近的数据。每当用户查询视图时，数据库引擎通过使用 SQL 语句来重建数据。
      
    SQL CREATE OR REPLACE VIEW Syntax
        CREATE OR REPLACE VIEW view_name AS
        SELECT column_name(s)
        FROM table_name
        WHERE condition
        
    SQL DROP VIEW Syntax
        DROP VIEW view_name
        
MySQL Date 函数
下面的表格列出了 MySQL 中最重要的内建日期函数：
函数	描述
NOW()	返回当前的日期和时间
CURDATE()	返回当前的日期
CURTIME()	返回当前的时间
DATE()	提取日期或日期/时间表达式的日期部分
EXTRACT()	返回日期/时间按的单独部分
DATE_ADD()	给日期添加指定的时间间隔
DATE_SUB()	从日期减去指定的时间间隔
DATEDIFF()	返回两个日期之间的天数
DATE_FORMAT()	用不同的格式显示日期/时间

SQL Server Date 函数
下面的表格列出了 SQL Server 中最重要的内建日期函数：
函数	描述
GETDATE()	返回当前日期和时间
DATEPART()	返回日期/时间的单独部分
DATEADD()	在日期中添加或减去指定的时间间隔
DATEDIFF()	返回两个日期之间的时间
CONVERT()	用不同的格式显示日期/时间

SQL Date 数据类型
MySQL 使用下列数据类型在数据库中存储日期或日期/时间值：
DATE - 格式 YYYY-MM-DD
DATETIME - 格式: YYYY-MM-DD HH:MM:SS
TIMESTAMP - 格式: YYYY-MM-DD HH:MM:SS
YEAR - 格式 YYYY 或 YY

SQL Server 使用下列数据类型在数据库中存储日期或日期/时间值：
DATE - 格式 YYYY-MM-DD
DATETIME - 格式: YYYY-MM-DD HH:MM:SS
SMALLDATETIME - 格式: YYYY-MM-DD HH:MM:SS
TIMESTAMP - 格式: 唯一的数字

SELECT LastName,FirstName,Address FROM Persons
WHERE Address IS NULL

SELECT LastName,FirstName,Address FROM Persons
WHERE Address IS NOT NULL

isnull()

数据类型
        
